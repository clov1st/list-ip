// ========= AUTO FILL: PRIMARY TEXT (1..5) + JUDUL/HEADLINE (1..5) =========
// Jalankan di Console Ads Manager saat panel Creative terbuka (Primary Text & Judul terlihat)
(async () => {
  // ===================== CONFIG =====================
  const PRIMARY_VALUES = [
    "primary text auto 1",
    "primary text auto 2",
    "primary text auto 3",
    "primary text auto 4",
    "primary text auto 5",
  ];
  const TITLE_VALUES = [
    "title auto 1",
    "title auto 2",
    "title auto 3",
    "title auto 4",
    "title auto 5",
  ];

  const WANT_OPTIONS = 4;          // jumlah box opsi per bidang (di luar base)
  const MAX_ADD_TRIES = 12;        // klik add maksimum
  const NOCHANGE_BREAK_AFTER = 3;  // berhenti kalau 3x klik tak nambah

  // ===================== HELPERS =====================
  const sleep = (ms) => new Promise(r => setTimeout(r, ms));

  const getRoots = () => {
    const roots = [document];
    document.querySelectorAll("iframe").forEach(ifr => {
      try { if (ifr.contentDocument) roots.push(ifr.contentDocument); } catch {}
    });
    return roots;
  };

  const waitCountChange = (root, getter, oldCount, timeout=3500) => new Promise(resolve=>{
    const obs = new MutationObserver(() => {
      try { const n = getter(); if (n !== oldCount) { obs.disconnect(); clearTimeout(t); resolve(true); } } catch {}
    });
    const t = setTimeout(()=>{ obs.disconnect(); resolve(false); }, timeout);
    obs.observe(root, { childList:true, subtree:true });
  });

  const nativeClick = (el) => {
    const win = el.ownerDocument?.defaultView || window;
    ["pointerdown","mousedown","focus","pointerup","mouseup","click"].forEach(type=>{
      el.dispatchEvent(new win.MouseEvent(type,{bubbles:true,cancelable:true,view:win}));
    });
  };

  const setTA = (() => {
    const desc = Object.getOwnPropertyDescriptor(HTMLTextAreaElement.prototype, "value");
    return (el, val) => {
      desc?.set ? desc.set.call(el, val) : (el.value = val);
      el.dispatchEvent(new InputEvent("input", { bubbles: true }));
    };
  })();

  // Robust setter untuk contenteditable (Lexical/React)
  const setContentEditable = async (el, text) => {
    if (!el) return false;
    const doc = el.ownerDocument || document;
    const win = doc.defaultView || window;

    for (let i = 0; i < 5; i++) {
      try {
        el.scrollIntoView?.({block: "center"});
        el.focus();
        await new Promise(r => win.requestAnimationFrame(r));

        const sel = doc.getSelection();
        const range = doc.createRange();
        range.selectNodeContents(el);
        sel.removeAllRanges();
        sel.addRange(range);

        // hapus isi lama
        doc.execCommand("delete", false, null);
        // sisipkan teks baru
        if (!doc.execCommand("insertText", false, text)) {
          el.textContent = text;
        }

        // trigger event tambahan supaya React Lexical sinkron
        ["input","keyup","keydown","change","blur"].forEach(ev =>
          el.dispatchEvent(new Event(ev, {bubbles:true}))
        );

      } catch {
        await sleep(80);
        continue;
      }

      const cur = (el.innerText || el.textContent || "").trim();
      if (cur === text) return true;
      await sleep(100);
    }

    // fallback keras — isi langsung + event manual
    el.textContent = text;
    ["input","blur"].forEach(ev =>
      el.dispatchEvent(new Event(ev, {bubbles:true}))
    );
    return true;
  };


  // ===================== PRIMARY TEXT (Teks utama) =====================
  const PRIMARY_ADD_BTN_TEXTS = ["Tambahkan opsi teks","Tambahkan opsi lainnya","Add text option"];
  const PRIMARY_BASE_ARIA_PARTS = ["Beri tahu orang-orang","Tell people","Teks utama","Primary text"];
  const PRIMARY_OPTION_LABEL_PAT = /(Masukkan opsi lain untuk teks|Enter another option for|Option|Opsi)/i;

  const findPrimaryBase = (root) => {
    for (const p of PRIMARY_BASE_ARIA_PARTS) {
      const el = root.querySelector(`div[contenteditable='true'][aria-label*='${p}']`);
      if (el) return el;
    }
    return root.querySelector("div[contenteditable='true'][role='textbox'], div[contenteditable='true']");
  };

  const findPrimaryAddBtn = (root) => {
    const list = [...root.querySelectorAll("div[role='button'],button")]
      .filter(b => PRIMARY_ADD_BTN_TEXTS.some(t => (b.textContent||"").trim().includes(t)));
    return list.at(-1) || null;
  };

  const findPrimaryOptionTAs = (root) => {
    const list = [];
    root.querySelectorAll("div._9vo4, div[role='heading'], label").forEach(lbl=>{
      const tx = (lbl.innerText||"").trim();
      if (PRIMARY_OPTION_LABEL_PAT.test(tx)) {
        const ta = lbl.parentElement?.querySelector("textarea");
        if (ta) list.push(ta);
      }
    });
    if (!list.length) root.querySelectorAll("textarea").forEach(ta=>list.push(ta));
    return [...new Set(list)];
  };

  const runPrimary = async () => {
    let chosen = null;
    for (const r of getRoots()) {
      if (findPrimaryBase(r) || findPrimaryAddBtn(r) || findPrimaryOptionTAs(r).length) { chosen = r; break; }
    }
    if (!chosen) { console.warn("⚠️ Panel 'Teks utama' tidak terlihat."); return {ok:false}; }
    const root = chosen;

    // 1) pastikan ada 4 opsi
    for (;;) {
      const before = findPrimaryOptionTAs(root).length;
      if (before >= WANT_OPTIONS) break;
      const btn = findPrimaryAddBtn(root);
      if (!btn) break;
      nativeClick(btn);
      await waitCountChange(root, ()=>findPrimaryOptionTAs(root).length, before, 4000);
      await sleep(120);
    }

    // 2) isi opsi 2..5
    const pOpts = findPrimaryOptionTAs(root).slice(0, WANT_OPTIONS);
    for (let i=0;i<pOpts.length;i++){
      for (let r=0;r<3;r++){
        setTA(pOpts[i], PRIMARY_VALUES[i+1]);
        await sleep(80);
        if ((pOpts[i].value||"").trim() === PRIMARY_VALUES[i+1]) break;
        await sleep(120);
      }
    }

    // 3) isi base terakhir
    const base = findPrimaryBase(root);
    if (base) await setContentEditable(base, PRIMARY_VALUES[0]);

    const baseFilled = base ? (base.innerText||base.textContent||"").trim() : "(missing)";
    console.log("✅ PRIMARY done:", {base: baseFilled, options: pOpts.map(t=>t.value)});
    const base_information = baseFilled;
    return {ok:true};
  };

  // ===================== JUDUL / HEADLINE =====================
  const TITLE_BASE_LABELS = ["Tulis judul yang singkat","Headline","Judul"];
  const TITLE_OPTION_LABEL_PAT = /(Masukkan opsi lain untuk judul|Enter another option.*headline|headline.*option|opsi.*judul)/i;

  const findTitleBaseTA = (root) => {
    for (const t of TITLE_BASE_LABELS) {
      const label = [...root.querySelectorAll("div._9vo4")]
        .find(d => (d.innerText||"").trim().includes(t));
      if (label) {
        const ta = label.parentElement?.querySelector("textarea");
        if (ta) return ta;
      }
    }
    return null;
  };

  const findTitleOptionTAs = (root) => {
    const list = [];
    root.querySelectorAll("div._9vo4, div._9voc._9vod").forEach(lbl=>{
      const tx = (lbl.innerText||"").trim();
      if (TITLE_OPTION_LABEL_PAT.test(tx)) {
        const ta = lbl.parentElement?.querySelector("textarea");
        if (ta) list.push(ta);
      }
    });
    return [...new Set(list)];
  };

  const findTitleAddBtn = (root, baseLabelEl=null) => {
    // kandidat yang paling stabil: data-surface headline_field + dco-add-asset-button
    const ds = [...root.querySelectorAll("div[role='button'][data-surface*='headline_field'][data-surface*='dco-add-asset-button']")];
    const textBtns = [...root.querySelectorAll("div[role='button'],button")]
      .filter(b => /Tambahkan\s+opsi\s+judul|Add\s+headline\s+option/i.test(b.textContent || ""));
    const candidates = [...ds, ...textBtns];
    if (!candidates.length) return null;

    if (!baseLabelEl) return candidates.at(-1);

    // pilih yang paling dekat dari area judul (di bawah base)
    const br = baseLabelEl.getBoundingClientRect();
    let best = null, bestScore = Infinity;
    for (const el of candidates) {
      const r = el.getBoundingClientRect?.();
      if (!r || !r.width || !r.height) continue;
      const dy = Math.abs((r.top + r.bottom)/2 - (br.bottom + br.top)/2);
      const penaltyAbove = r.top < br.top ? 1000 : 0;
      const score = dy + penaltyAbove;
      if (score < bestScore) { bestScore = score; best = el; }
    }
    return best || candidates.at(-1);
  };

  const runTitle = async () => {
    let chosen = null;
    for (const r of getRoots()) {
      if (findTitleBaseTA(r) || findTitleOptionTAs(r).length || findTitleAddBtn(r)) { chosen = r; break; }
    }
    if (!chosen) { console.warn("⚠️ Panel 'Judul' tidak terlihat."); return {ok:false}; }
    const root = chosen;

    // cari elemen label base (untuk bantu memilih tombol terdekat)
    const baseLabelEl = [...root.querySelectorAll("div._9vo4")]
      .find(d => TITLE_BASE_LABELS.some(t => (d.innerText||"").trim().includes(t))) || root.body;

    // 1) pastikan ada 4 opsi
    let tries = 0, noChange = 0;
    while (tries < MAX_ADD_TRIES) {
      const before = findTitleOptionTAs(root).length;
      if (before >= WANT_OPTIONS) break;

      const btn = findTitleAddBtn(root, baseLabelEl);
      if (!btn) { console.warn("⚠️ Tombol 'Tambahkan opsi judul' tidak ditemukan."); break; }
      if (btn.getAttribute?.("aria-disabled") === "true" || btn.getAttribute?.("aria-busy") === "true") break;

      nativeClick(btn);
      const changed = await waitCountChange(root, ()=>findTitleOptionTAs(root).length, before, 3500);
      await sleep(120);
      tries++;

      if (!changed) {
        noChange++;
        if (noChange >= NOCHANGE_BREAK_AFTER) { console.warn("Stop add judul: tidak ada perubahan DOM."); break; }
      } else {
        noChange = 0;
      }
    }

    // 2) isi opsi 2..5
    const tOpts = findTitleOptionTAs(root).slice(0, WANT_OPTIONS);
    for (let i=0;i<tOpts.length;i++){
      for (let r=0;r<3;r++){
        setTA(tOpts[i], TITLE_VALUES[i+1]);
        await sleep(80);
        if ((tOpts[i].value||"").trim() === TITLE_VALUES[i+1]) break;
        await sleep(120);
      }
    }

    // 3) isi base terakhir
    const baseTA = findTitleBaseTA(root);
    if (baseTA) {
      for (let r=0;r<3;r++){
        setTA(baseTA, TITLE_VALUES[0]);
        await sleep(120);
        if ((baseTA.value||"").trim() === TITLE_VALUES[0]) break;
      }
    }

    console.log("✅ TITLE done:", {
      base: baseTA ? baseTA.value.trim() : "(missing)",
      options: tOpts.map(t=>t.value)
    });
    return {ok:true};
  };

  // ===================== EXECUTE IN ORDER =====================
  await runPrimary();
  await sleep(250);
  await runTitle();

  // Tambahkan sebelum "All done"
  if (base_information = "(missing)") {
    console.warn("⚠️ Base primary text missing, running fallback...");
    await (async () => {
      console.log("retry fill to base primary text")
      //script auto fill yang ada di github
    })();
  }


  console.log("🎉 All done.");
})();
